import{_ as n,c as s,o as e,ag as t}from"./chunks/framework.ByciF0Oj.js";const d=JSON.parse('{"title":"MarkItDown深入研究","description":"","frontmatter":{},"headers":[],"relativePath":"docs/other/markitdown-a-deep-dive.md","filePath":"docs/other/markitdown-a-deep-dive.md","lastUpdated":1740531902000}'),p={name:"docs/other/markitdown-a-deep-dive.md"};function l(i,a,o,r,c,g){return e(),s("div",null,a[0]||(a[0]=[t(`<h1 id="markitdown深入研究" tabindex="-1">MarkItDown深入研究 <a class="header-anchor" href="#markitdown深入研究" aria-label="Permalink to &quot;MarkItDown深入研究&quot;">​</a></h1><blockquote><p>MarkItDown 是 Microsoft 开发的 Python 包，旨在将各种文件格式转换为 Markdown。</p></blockquote><h3 id="关于langchat" tabindex="-1">关于LangChat <a class="header-anchor" href="#关于langchat" aria-label="Permalink to &quot;关于LangChat&quot;">​</a></h3><p><strong>LangChat</strong> 是Java生态下企业级AIGC项目解决方案，集成RBAC和AIGC大模型能力，帮助企业快速定制AI知识库、企业AI机器人。</p><p><strong>支持的AI大模型：</strong> Gitee AI / 阿里通义 / 百度千帆 / DeepSeek / 抖音豆包 / 智谱清言 / 零一万物 / 讯飞星火 / OpenAI / Gemini / Ollama / Azure / Claude 等大模型。</p><ul><li>官网地址：<a href="http://langchat.cn/" target="_blank" rel="noreferrer">http://langchat.cn/</a></li></ul><p><strong>开源地址：</strong></p><ul><li>Gitee：<a href="https://gitee.com/langchat/langchat" target="_blank" rel="noreferrer">https://gitee.com/langchat/langchat</a></li><li>Github：<a href="https://github.com/tycoding/langchat" target="_blank" rel="noreferrer">https://github.com/tycoding/langchat</a></li></ul><p><img src="http://cdn.tycoding.cn/docs/202502151026673.png" alt="iShot_2025-02-12_12.18.53" loading="lazy"></p><p><img src="http://www.hubwiz.com/blog/content/images/size/w2000/2024/12/markitdown-a-deep-dive.png" alt="MarkItDown深入研究" loading="lazy"></p><p><a href="https://github.com/microsoft/markitdown/" target="_blank" rel="noreferrer">MarkItDown </a>是 Microsoft 开发的 Python 包，旨在将各种文件格式转换为 Markdown。</p><p>自首次亮相以来，该库的人气飙升，在短短两周内就获得了超过 25,000 个 GitHub 星！🤯</p><h2 id="_1、是什么让-markitdown-如此受欢迎" tabindex="-1">1、是什么让 MarkItDown 如此受欢迎？ <a class="header-anchor" href="#_1、是什么让-markitdown-如此受欢迎" aria-label="Permalink to &quot;1、是什么让 MarkItDown 如此受欢迎？&quot;">​</a></h2><p>MarkItDown 为各种文件类型提供强大的支持，例如：</p><ul><li>Office 格式：Word、PowerPoint、Excel</li><li>媒体文件：图像（带有 EXIF 数据和描述）、音频（带有转录支持）</li><li>Web 和数据格式：HTML、JSON、XML、CSV</li><li>档案：ZIP 文件</li></ul><p>它不仅可以处理 Word 等标准格式，还可以处理多模式数据，这使其脱颖而出。例如，它使用 OCR 和语音识别从图像和音频文件中提取内容。</p><p>将任何内容转换为 Markdown 的能力使 MarkItDown 成为 LLM 培训的强大工具。通过处理特定领域的文档，它提供了丰富的上下文，以便在 LLM 驱动的应用程序中生成更准确、更相关的响应。</p><h2 id="_2、markitdown-入门" tabindex="-1">2、MarkItDown 入门 <a class="header-anchor" href="#_2、markitdown-入门" aria-label="Permalink to &quot;2、MarkItDown 入门&quot;">​</a></h2><p>使用 MarkItDown 非常简单 - 只需要 4 行代码：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>from markitdown import MarkItDown</span></span>
<span class="line"><span></span></span>
<span class="line"><span>md = MarkItDown()</span></span>
<span class="line"><span>result = md.convert(&quot;test.xlsx&quot;)</span></span>
<span class="line"><span>print(result.text_content)</span></span></code></pre></div><p>以下是 MarkItDown 的一些用例。</p><p>转换 Word 文档可生成干净准确的 Markdown：</p><p><img src="http://www.hubwiz.com/blog/content/images/2024/12/image-742.png" alt="img" loading="lazy"></p><p>即使是多标签 Excel 电子表格也可以轻松处理：</p><p><img src="http://www.hubwiz.com/blog/content/images/2024/12/image-743.png" alt="img" loading="lazy"></p><p>ZIP 存档？没问题！该库会递归解析其中的所有文件：</p><p><img src="http://www.hubwiz.com/blog/content/images/2024/12/image-744.png" alt="img" loading="lazy"></p><p>最初，图像提取可能不会产生任何结果：</p><p><img src="http://www.hubwiz.com/blog/content/images/2024/12/image-745.png" alt="img" loading="lazy"></p><p>这是因为 MarkItDown 依赖 LLM 来生成图像描述。通过集成 LLM 客户端，您可以启用此功能：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>from openai import OpenAI</span></span>
<span class="line"><span></span></span>
<span class="line"><span>client = OpenAI(api_key=&quot;i-am-not-an-api-key&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>md = MarkItDown(llm_client=client, llm_model=&quot;gpt-4o&quot;)</span></span></code></pre></div><p>配置完成后，可以成功处理图像文件：</p><p><img src="http://www.hubwiz.com/blog/content/images/2024/12/image-746.png" alt="img" loading="lazy"></p><p>注意：LLM 不会处理基于图像的 PDF。PDF 需要 OCR 预处理才能提取内容。</p><p><img src="http://www.hubwiz.com/blog/content/images/2024/12/image-747.png" alt="img" loading="lazy"></p><p>但是，PDF 在提取时会丢失其格式，因此无法区分标题和纯文本：</p><p><img src="http://www.hubwiz.com/blog/content/images/2024/12/image-748.png" alt="img" loading="lazy"></p><h2 id="_3、局限性" tabindex="-1">3、局限性 <a class="header-anchor" href="#_3、局限性" aria-label="Permalink to &quot;3、局限性&quot;">​</a></h2><p>MarkItDown 并非没有限制：</p><ul><li>无法处理没有 OCR 的 PDF 文件。</li><li>从 PDF 文件中提取时无法设置格式。</li></ul><p>尽管如此，作为一个开源项目，它具有高度可定制性。由于其代码库简洁，开发人员可以轻松扩展其功能。</p><h2 id="_4、markitdown-的工作原理" tabindex="-1">4、MarkItDown 的工作原理 <a class="header-anchor" href="#_4、markitdown-的工作原理" aria-label="Permalink to &quot;4、MarkItDown 的工作原理&quot;">​</a></h2><p>MarkItDown 的架构简单且模块化。其核心逻辑完全位于单个文件中。</p><p>它有一个 <code>DocumentConverter</code> 类，该类定义了一个通用的 <code>convert()</code> 方法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>class DocumentConverter:</span></span>
<span class="line"><span>    &quot;&quot;&quot;Base class for all document converters.&quot;&quot;&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def convert(</span></span>
<span class="line"><span>        self, local_path: str, **kwargs: Any</span></span>
<span class="line"><span>    ) -&gt; Union[None, DocumentConverterResult]:</span></span>
<span class="line"><span>        raise NotImplementedError()</span></span></code></pre></div><p>各个转换器从此基类继承并动态注册：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>self.register_page_converter(PlainTextConverter())</span></span>
<span class="line"><span>self.register_page_converter(HtmlConverter())</span></span>
<span class="line"><span>self.register_page_converter(DocxConverter())</span></span>
<span class="line"><span>self.register_page_converter(XlsxConverter())</span></span>
<span class="line"><span>self.register_page_converter(Mp3Converter())</span></span>
<span class="line"><span>self.register_page_converter(ImageConverter())</span></span>
<span class="line"><span># ...</span></span></code></pre></div><p>这种模块化方法可以轻松添加对新文件类型的支持。</p><h2 id="_5、文件转换工作流程" tabindex="-1">5、文件转换工作流程 <a class="header-anchor" href="#_5、文件转换工作流程" aria-label="Permalink to &quot;5、文件转换工作流程&quot;">​</a></h2><ul><li>Office 文档</li></ul><p>使用 mammoth、pandas 或 pptx 等库将 Office 文件转换为 HTML，然后使用 BeautifulSoup 转换为 Markdown。</p><p><img src="http://www.hubwiz.com/blog/content/images/2024/12/image-749.png" alt="img" loading="lazy"></p><ul><li>音频文件</li></ul><p>音频使用 Speech_recognition 库转录，该库利用 Google 的 API。</p><p>（微软，为什么不使用 Azure？💔）</p><p><img src="http://www.hubwiz.com/blog/content/images/2024/12/image-750.png" alt="img" loading="lazy"></p><ul><li>图像</li></ul><p>图像处理涉及通过 LLM 提示生成标题：</p><blockquote><p>“为此图像写一个详细描述。”</p></blockquote><p><img src="http://www.hubwiz.com/blog/content/images/2024/12/image-751.png" alt="img" loading="lazy"></p><ul><li>PDF</li></ul><p>PDF 由 pdfminer 库处理，但缺少内置 OCR。你必须预处理 PDF 以进行文本提取。</p><p><img src="http://www.hubwiz.com/blog/content/images/2024/12/image-752.png" alt="img" loading="lazy"></p><h2 id="_6、将-markitdown-部署为-api" tabindex="-1">6、将 MarkItDown 部署为 API <a class="header-anchor" href="#_6、将-markitdown-部署为-api" aria-label="Permalink to &quot;6、将 MarkItDown 部署为 API&quot;">​</a></h2><p>MarkItDown 可以在本地运行，但将其作为 API 托管可以解锁额外的灵活性，使其易于集成到 Zapier 和 n8n 等工作流程中。</p><p>以下是使用 FastAPI 的 MarkItDown API 的简单示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import shutil</span></span>
<span class="line"><span>from markitdown import MarkItDown</span></span>
<span class="line"><span>from fastapi import FastAPI, UploadFile</span></span>
<span class="line"><span>from uuid import uuid4</span></span>
<span class="line"><span></span></span>
<span class="line"><span>md = MarkItDown()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>app = FastAPI()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@app.post(&quot;/convert&quot;)</span></span>
<span class="line"><span>async def convert_markdown(file: UploadFile):</span></span>
<span class="line"><span>    unique_id = uuid4()</span></span>
<span class="line"><span>    temp_dir = f&quot;./temp/{unique_id}&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    shutil.os.makedirs(temp_dir, exist_ok=True)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    file_path = f&quot;{temp_dir}/{file.filename}&quot;</span></span>
<span class="line"><span>    with open(file_path, &quot;wb&quot;) as f:</span></span>
<span class="line"><span>        shutil.copyfileobj(file.file, f)</span></span>
<span class="line"><span>    result = md.convert(file_path)</span></span>
<span class="line"><span>    content = result.text_content</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    shutil.rmtree(temp_dir)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    return {&quot;result&quot;: content}</span></span></code></pre></div><p>要调用API：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const formData = new FormData();</span></span>
<span class="line"><span>formData.append(&#39;file&#39;, file);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const response = await fetch(&#39;http://localhost:8000/convert&#39;, {</span></span>
<span class="line"><span>  method: &#39;POST&#39;,</span></span>
<span class="line"><span>  body: formData,</span></span>
<span class="line"><span>});</span></span></code></pre></div><h2 id="_7、免费托管-api" tabindex="-1">7、免费托管 API <a class="header-anchor" href="#_7、免费托管-api" aria-label="Permalink to &quot;7、免费托管 API&quot;">​</a></h2><p>托管 Python API 可能很棘手。传统服务（如 AWS EC2 或 DigitalOcean）需要租用整台服务器，这总是很昂贵。</p><p>但现在，你可以使用 <a href="https://leapcell.io/" target="_blank" rel="noreferrer">Leapcell</a>。</p><p>这是一个可以以无服务器方式托管 Python 代码库的平台 - 它只按 API 调用收费，并提供慷慨的免费使用套餐。</p><p>只需连接你的 GitHub 存储库，定义构建和启动命令，一切就绪：</p><p><img src="http://www.hubwiz.com/blog/content/images/2024/12/image-753.png" alt="img" loading="lazy"></p><p>现在你有一个托管在云中的 MarkItDown API，可以集成到你的工作流程中，最重要的是，只有在真正调用时才收费。</p><ul><li>参考：<a href="https://dev.to/leapcell/deep-dive-into-microsoft-markitdown-4if5" target="_blank" rel="noreferrer">https://dev.to/leapcell/deep-dive-into-microsoft-markitdown-4if5</a></li></ul><h2 id="联系我" tabindex="-1">联系我 <a class="header-anchor" href="#联系我" aria-label="Permalink to &quot;联系我&quot;">​</a></h2><p>最后，推荐大家关注一下开源项目：LangChat，Java生态下的AIGC大模型产品解决方案。</p><ul><li>LangChat产品官网：<a href="https://langchat.cn/" target="_blank" rel="noreferrer">https://langchat.cn/</a></li><li>Github: <a href="https://github.com/TyCoding/langchat" target="_blank" rel="noreferrer">https://github.com/TyCoding/langchat</a></li><li>Gitee: <a href="https://gitee.com/langchat/langchat" target="_blank" rel="noreferrer">https://gitee.com/langchat/langchat</a></li><li>微信：LangchainChat</li></ul><p><img src="http://cdn.tycoding.cn/docs/202502151026673.png" alt="iShot_2025-02-12_12.18.53" loading="lazy"></p>`,81)]))}const m=n(p,[["render",l]]);export{d as __pageData,m as default};
