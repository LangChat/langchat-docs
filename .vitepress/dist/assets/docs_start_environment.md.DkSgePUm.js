import{_ as a,c as t,o as i,ag as e}from"./chunks/framework.ByciF0Oj.js";const g=JSON.parse('{"title":"环境准备","description":"","frontmatter":{},"headers":[],"relativePath":"docs/start/environment.md","filePath":"docs/start/environment.md","lastUpdated":1740532654000}'),n={name:"docs/start/environment.md"};function r(p,s,l,o,h,d){return i(),t("div",null,s[0]||(s[0]=[e(`<h1 id="环境准备" tabindex="-1">环境准备 <a class="header-anchor" href="#环境准备" aria-label="Permalink to &quot;环境准备&quot;">​</a></h1><p>在运行项目之前，需要确保已经搭建好与之相匹配的开发环境。以下是基础开发环境要求：</p><h3 id="前端基础环境" tabindex="-1">前端基础环境 <a class="header-anchor" href="#前端基础环境" aria-label="Permalink to &quot;前端基础环境&quot;">​</a></h3><ul><li>Node.js &gt; 22</li></ul><p>安装并使用 <code>pnpm install</code>。如果你是中国用户并遇到下载速度问题，推荐使用以下镜像源：</p><p>注意：不要使用npm</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-wwVAv" id="tab-ZMP4hkw" checked><label data-title="pnpm" for="tab-ZMP4hkw">pnpm</label></div><div class="blocks"><div class="language-bash vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置为国内镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://registry.npmmirror.com</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置为官方镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://registry.npmjs.org/</span></span></code></pre></div></div></div><h3 id="后端基础环境" tabindex="-1">后端基础环境 <a class="header-anchor" href="#后端基础环境" aria-label="Permalink to &quot;后端基础环境&quot;">​</a></h3><p>后端的基础环境要求如下：</p><ul><li><strong>JDK ≥ 17</strong></li><li><strong>MySQL ≥ 8</strong></li><li><strong>Pg Vector</strong></li><li><strong>Redis</strong></li></ul><p>由于本项目使用了最新的技术栈，这里不再考虑支持 JDK8。当然，如果你想要迁移到 JDK8，成本也并不高。</p><p>本项目选择使用 JDK17 而非 JDK8 的主要原因：</p><ol><li>使用最新的技术栈进行开发，包括前端和后端。老版本官方已经不再提供支持。</li><li>在 <strong>LLM</strong> 项目代码中会有很多 Prompt 内容，JDK17 的 &quot;&quot;&quot; 文本块写法非常方便。</li><li>安全性和性能的考虑。</li></ol><p>除此之外，代码层面并没有太多变化。如果你希望将代码迁移到 JDK8，只需要从上述两个方面进行考虑即可。</p><h3 id="安装pgvector" tabindex="-1">安装PgVector <a class="header-anchor" href="#安装pgvector" aria-label="Permalink to &quot;安装PgVector&quot;">​</a></h3><p>MySQL和Redis的安装这里不再说明，主要说一下PgVector向量数据库的安装：</p><p>PgVector的开源地址：<a href="https://github.com/pgvector/pgvector" target="_blank" rel="noreferrer">https://github.com/pgvector/pgvector</a> 你可以使用官方提供的本地安装方式。</p><p>安装后手动<strong>创建<code>langchat</code>数据库</strong>，创建完成即可。</p><p>我这里提供Docker Compose一键部署脚本，此脚本在启动容器的时候会自动创建<code>langchat</code>数据库：</p>`,19)]))}const k=a(n,[["render",r]]);export{g as __pageData,k as default};
